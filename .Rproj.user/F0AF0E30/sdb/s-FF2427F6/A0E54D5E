{
    "collab_server" : "",
    "contents" : "# Libraries\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(prophet)\nlibrary(forecast)\n\n# Read data\nbikes <- read_csv('bikes.csv') %>%\n    mutate(datetime = date(datetime))\n\n# Separate data\ntrain <- bikes %>% select(datetime, count) %>%\n    filter(datetime < as.Date(\"2012-01-01\")) %>%\n    group_by(datetime) %>%\n    summarise(y = sum(count))\nnames(train) <- c('ds', 'y')\n\nvalid <- bikes %>% select(datetime, count) %>%\n    filter(datetime >= as.Date(\"2012-01-01\") & datetime < as.Date(\"2012-07-01\")) %>%\n    group_by(datetime) %>%\n    summarise(y = sum(count))\nnames(valid) <- c('ds', 'y')\n\ntest <- bikes %>% select(datetime, count) %>%\n    filter(datetime >= as.Date(\"2012-07-01\")) %>%\n    group_by(datetime) %>%\n    summarise(y = sum(count))\nnames(test) <- c('ds', 'y')\n\n# Holidays (from http://www.officeholidays.com/countries/usa/2011.php)\nholidays <- filter(bikes, holiday == 1) %>% \n    select(datetime) %>%\n    distinct()\nholidays$holiday = c('Martin Luther King', 'Emancipation Day', 'Independence Day',\n                     'Labor Day', 'Columbus Day', 'Veterans Day', 'New Year', \n                     'Martin Luther King', 'Emancipation Day', 'Independence Day',\n                     'Labor Day', 'Columbus Day', 'Veterans Day')\nnames(holidays) <- c('ds', 'holiday')\n\n# Plot for the training set\np <- ggplot(train, aes(x = ds, y = y))\np <- p + geom_point(size = 0.5)\np\n\n# Search grid\nprophetGrid <- expand.grid(changepoint_prior_scale = c(0.05, 0.5, 0.001),\n                           seasonality_prior_scale = c(100, 10, 1),\n                           holidays_prior_scale = c(100, 10, 1),\n                           capacity = c(6043, 6500, 7000, 8000),\n                           growth = c('linear', 'logistic'))\nprophetGrid <- prophetGrid[-c(28:108), ]\nprophetGrid[prophetGrid$growth == 'linear', 'capacity'] <- NA\nprophetGrid$growth <- as.character(prophetGrid$growth)\nresults <- vector(mode = 'numeric', length = nrow(prophetGrid))\n\n# Search best parameters\nfor (i in seq_len(nrow(prophetGrid))) {\n    parameters <- prophetGrid[i, ]\n    if (parameters$growth == 'logistic') {train$cap <- parameters$capacity}\n    set.seed(12321)\n    m <- prophet(train, growth = parameters$growth, holidays = holidays,\n                 seasonality.prior.scale = parameters$seasonality_prior_scale, \n                 changepoint.prior.scale = parameters$changepoint_prior_scale,\n                 holidays.prior.scale = parameters$holidays_prior_scale)\n    \n    future <- make_future_dataframe(m, periods = 184)\n    if (parameters$growth == 'logistic') {future$cap <- parameters$capacity}\n    \n    # NOTE: There's a problem in function names with library(caret)\n    forecast <- predict(m, future)\n    #tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])\n    #forecast$ds <- as.POSIXct(forecast$ds)\n    #forecast$ds[seq_len(nrow(train))] <- train$datetime\n    #forecast$ds[5423:nrow(forecast)] <- seq(ymd_hms('2011-12-20 01:00:00'), by = 'day', length.out = 364)\n    \n    results[i] <- forecast::accuracy(forecast[forecast$ds %in% valid$ds, 'yhat'], valid$y)[ , 'MAE']\n}\n\nprophetGrid <- cbind(prophetGrid, results)\nbest_params <- prophetGrid[prophetGrid$results == min(results), ]\n\n# Retrain using train and validation set\nretrain <- bind_rows(train, valid)\nretrain$cap <- best_params$capacity\nm <- prophet(retrain, growth = 'logistic', holidays = holidays,\n             seasonality.prior.scale = best_params$seasonality_prior_scale, \n             changepoint.prior.scale = best_params$changepoint_prior_scale,\n             holidays.prior.scale = best_params$holidays_prior_scale)\n\nfuture <- make_future_dataframe(m, periods = 184)\nfuture$cap <- best_params$capacity\n\nforecast <- predict(m, future)\nforecast::accuracy(forecast[forecast$ds %in% test$ds, 'yhat'], test$y)[ , 'MAE']\n\n# Prophet plots\nplot(m, forecast)\nprophet_plot_components(m, forecast)\n\n# Final plot\np <- ggplot()\np <- p + geom_point(data = train, aes(x = ds, y = y), size = 0.5)\np <- p + geom_line(data = forecast, aes(x = ds, y = yhat), color = \"#0072B2\")\np <- p + geom_ribbon(data = forecast, aes(x = ds, ymin = yhat_lower, ymax = yhat_upper), fill = \"#0072B2\", alpha = 0.3)\np <- p + geom_point(data = valid, aes(x = ds, y = y), size = 0.5, color = '#4daf4a')\np <- p + geom_point(data = test, aes(x = ds, y = y), size = 0.5, color = 'red')\np\n",
    "created" : 1492355418366.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2102581896",
    "id" : "A0E54D5E",
    "lastKnownWriteTime" : 1492356370,
    "last_content_update" : 1492356370345,
    "path" : "~/Documents/Prophet/experiment.R",
    "project_path" : "experiment.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}